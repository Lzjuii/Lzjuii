
 1. o(n) 做法

#include <iostream>
#define _cp(a,b) ((a) < (b))
using namespace std;
//定义需要输入的最大数组的长度
const int N = 1e5 + 10;
//定义一个数组，用来接受输入
int a[N];
//计算出数组长度为n的a数组的第k大的值
int kth_element(int n, int *a, int k)
{
    //二分查找第k大
    int t, key;
    int l = 0, r = n - 1, i, j;
    while (l < r)
    {
        for (key = a[((i = l - 1) + (j = r + 1)) >> 1]; i < j;)
        {
            for (j--; _cp(key, a[j]); j--);
            for (i++; _cp(a[i], key); i++);
            if (i < j)
            {
                t = a[i], a[i] = a[j], a[j] = t;
            }
        }
        if (k > j)
        {
            l = j + 1;
        }
        else
        {
            r = j;
        }
    }
    return a[n - k];
}

int main()
{
    int n, k;
    //输入数组的长度和要查询的第k大
    cin >> n >> k;
    //输入数字
    for(int i = 0; i < n; i++)
    {
        cin >> a[i];
    }
    //输出最终结果
    cout << kth_element(n, a, k)<<endl;
    return 0;
}


需要一个临时的数组，空间复杂度S(n)=O(n)
